buildscript {
    ext {
        springBootVersion = '2.3.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'kr.glider'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3')
    implementation('org.apache.logging.log4j:log4j-api:2.14.0')
    implementation('org.apache.logging.log4j:log4j-core:2.14.0')
    implementation('org.projectlombok:lombok')
    implementation('org.bouncycastle:bcprov-jdk15on:1.68')
    implementation('com.h2database:h2')

    // https://mvnrepository.com/artifact/org.ehcache/ehcache
    implementation('org.ehcache:ehcache:3.9.2')
    // https://mvnrepository.com/artifact/javax.cache/cache-api
    implementation('javax.cache:cache-api:1.1.1')
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation('com.google.code.gson:gson:2.8.6')

    annotationProcessor ('org.projectlombok:lombok')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation("org.springframework.security:spring-security-test")
    runtimeOnly('com.h2database:h2')

}

def webappDir = "$projectDir/src/main/view"

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "buildReact"
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task installReact(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}